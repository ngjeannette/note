{"version":3,"sources":["image/1.png","actions/index.js","component/navigation.js","component/utils.js","component/login.js","component/signup.js","component/sidebar.js","component/LoaderWrapper.js","component/notespage.js","component/favouritepage.js","component/notes.js","component/forgotpassword.js","component/notloggedin.js","component/home.js","App.js","serviceWorker.js","reducers/logininfo.js","reducers/favourite.js","reducers/sidebar.js","reducers/currentpage.js","reducers/loading.js","reducers/index.js","index.js"],"names":["module","exports","updatecurrentpage","info","type","payload","updatesidebar","updateloading","Navigation","loginInfoReducer","useSelector","state","loginReducer","dispatch","useDispatch","useEffect","className","Object","keys","length","shape","size","style","backgroundColor","icon","UserOutlined","target","rel","href","to","onClick","axiosPostSavedChanges","value","axios","post","axiosCheckTitleDuplicate","title","get","params","axiosUpdateTitle","prevTitle","username","a","axiosCreateNewPost","passData","axiosFindSectionPage","header","axiosCheckLogin","values","axiosPostRemoveNote","item","passParam","axiosSetHeaders","axiosCheckDuplicate","axiosPostSignup","Login","props","checkLogin","loginResult","data","openNotification","tailLayout","wrapperCol","offset","span","text","notification","open","message","placement","labelCol","name","onFinish","onFinishFailed","errorInfo","console","log","Item","label","rules","required","autoComplete","htmlType","Signup","applyCheck","email","password","checkDuplicateObj","addResult","initialValues","remember","SideBar","loginUsername","sidebarReducer","removeNote","index","splice","setHeaders","findFavourite","addOnePost","newPost","sidebarheaders","sidebarList","updatedSections","page","pageInfo","moment","format","color","favourite","showarea","updatePage","favouriteValue","setTimeout","addPostValue","HeartOutlined","map","key","CloseSquareOutlined","LoaderWrapper","isLoading","children","NotesPage","useState","setLoading","currentPageReducer","loadingReducer","TextArea","Input","setValue","setTitle","inputChanged","setInputChanged","addItem","savedChanges","updateTitle","updatedSidebar","updatepageinfo","onBlurFunc","addNewNote","passNewNote","push","placeholder","onChange","e","onBlur","slice","preventDefault","autoFocus","defaultValue","autoSize","minRows","resize","FavouritePage","filter","description","Notes","favouriteReducer","Forgot","checkUsername","then","response","catch","err","NotLoggedIn","Home","src","image","App","avatar","setAvatar","userInfo","setUserInfo","updateAvatar","updateUserInfo","exact","path","render","isAuthed","Boolean","window","location","hostname","match","action","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.09c0904c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.51b9e0bf.png\";","export const updateinfo = (info) => {\r\n    return {\r\n        type: 'UPDATE_LOGIN',\r\n        payload: info\r\n    }\r\n}\r\nexport const updateinfoempty = (info) => {\r\n    return {\r\n        type: 'UPDATE_LOGIN_EMPTY',\r\n        payload: info\r\n    }\r\n}\r\nexport const updatefavourite = (info) => {\r\n    return {\r\n        type: 'UPDATE_FAVOURITE',\r\n        payload: info\r\n    }\r\n}\r\nexport const updatecurrentpage = (info) => {\r\n    return {\r\n        type: 'UPDATE_CURRENT_PAGE',\r\n        payload: info\r\n    }\r\n}\r\nexport const updatesidebar = (info) => {\r\n    return {\r\n        type: 'UPDATE_SIDEBAR',\r\n        payload: info\r\n    }\r\n}\r\nexport const updateloading = (info) => {\r\n    return {\r\n        type: 'UPDATE_LOADING',\r\n        payload: info\r\n    }\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport '../App.scss';\r\nimport { Button, Avatar } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateinfoempty } from '../actions';\r\n\r\nfunction Navigation() {\r\n    const loginInfoReducer = useSelector(state => state.loginReducer);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {},[loginInfoReducer])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"navigation\">\r\n                <div className=\"sign-action\">\r\n                    \r\n                    {\r\n                        (loginInfoReducer && Object.keys(loginInfoReducer).length > 0) &&\r\n                        <Avatar shape=\"square\" size={30} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n                    }\r\n                    <Button>\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://flaviocopes.com/sample-app-ideas/\">\r\n                            Project 7\r\n                        </a>  \r\n                    </Button>\r\n                    <Button><Link to=\"/home\">Home</Link></Button>\r\n                    <Button>\r\n                        {\r\n                            (loginInfoReducer && Object.keys(loginInfoReducer).length > 0) ?\r\n                            <Link to=\"/notes\">Notes</Link>\r\n                            :\r\n                            <Link to=\"/notloggedin\">Notes</Link>\r\n                        }\r\n                    </Button>\r\n                    {\r\n                        (!loginInfoReducer || Object.keys(loginInfoReducer).length == 0) &&\r\n                        <Button><Link to=\"/login\">Sign In</Link></Button>\r\n                    }\r\n                    <Button><Link to=\"/signup\">Sign up</Link></Button>\r\n                    {\r\n                        (loginInfoReducer && Object.keys(loginInfoReducer).length > 0) &&\r\n                        <Button onClick={() => dispatch(updateinfoempty())} >\r\n                            <Link to=\"/home\">Sign out</Link>\r\n                        </Button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Navigation;\r\n","\r\nimport axios from 'axios';\r\n\r\n// notepage\r\nconst axiosPostSavedChanges = value => {\r\n    return axios.post('http://localhost:5000/notes/savedchanges', value)\r\n};\r\nconst axiosCheckTitleDuplicate = (title) => {\r\n    return axios.get('http://localhost:5000/notes/checktitleduplicate', { params: { title } })\r\n}\r\nconst axiosUpdateTitle = async (title, prevTitle, username) => {\r\n    return axios.post('http://localhost:5000/notes/updatetitle', { title, username, prevTitle });\r\n\r\n};\r\nconst axiosCreateNewPost = passData => {\r\n    return axios.post('http://localhost:5000/notes/createnewnote', passData)\r\n}\r\nconst axiosFindSectionPage = (header, username) => {\r\n    return axios.get('http://localhost:5000/notes/findsectionpage', { params: { header, username } })\r\n}\r\n\r\n// login\r\nconst axiosCheckLogin = values => {\r\n    return axios.get('http://localhost:5000/user/login', { params: values })\r\n}\r\n\r\n//sidebar\r\nconst axiosPostRemoveNote = (item, username) => {\r\n    const passParam = {\r\n        username,\r\n        header: item\r\n    };\r\n    return axios.post('http://localhost:5000/notes/removeNote', passParam);\r\n};\r\nconst axiosGetFavourites = (username) => {\r\n    return axios.get('http://localhost:5000/notes/getfavourites', { params: { username } })\r\n}\r\n\r\nconst axiosSetHeaders = username => {\r\n    return axios.get('http://localhost:5000/notes/findheader', { params: { username } })\r\n}\r\n\r\n//signup \r\nconst axiosCheckDuplicate = (values) => {\r\n    return axios.get('http://localhost:5000/user/checkuser', { params: values });\r\n}\r\n\r\nconst axiosPostSignup = (values) => {\r\n    return axios.post('http://localhost:5000/user/createuser', values);\r\n}\r\n\r\nexport { axiosPostSignup, axiosCheckDuplicate, axiosSetHeaders, axiosGetFavourites, axiosPostRemoveNote, axiosCheckLogin, axiosFindSectionPage, axiosCreateNewPost, axiosPostSavedChanges, axiosCheckTitleDuplicate, axiosUpdateTitle }","import React from 'react';\r\nimport '../App.scss';\r\nimport { Form, Input, Button, notification  } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateinfo } from '../actions';\r\nimport { axiosCheckLogin} from './utils'\r\n\r\n\r\nfunction Login(props) {\r\n    const dispatch = useDispatch();\r\n    const onFinish = values => {\r\n        checkLogin(values);\r\n    };\r\n\r\n    const checkLogin = async (values) => {\r\n        try {\r\n            const loginResult = await axiosCheckLogin(values);\r\n            if(loginResult.data === null) {\r\n                openNotification('Username and password does not match')\r\n            } else {\r\n                openNotification('Logged In');\r\n                dispatch(updateinfo(loginResult.data.username))\r\n            }\r\n\r\n        } catch (error) {\r\n            openNotification('Username and password does not match');\r\n        }\r\n    }\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    const tailLayout = {\r\n        wrapperCol: { offset: 8, span: 16 },\r\n    };\r\n\r\n    const openNotification = (text) => {\r\n        notification.open({\r\n            message: text,\r\n            placement: 'bottomRight'\r\n\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div><h1>Login</h1></div>\r\n            <Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n            >\r\n                <Form.Item\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    rules={[{ required: true, message: 'Please input your username' }]}\r\n                >\r\n                    <Input autoComplete=\"username\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password' }]}\r\n                >\r\n                    <Input autoComplete=\"current-password\" />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout}>\r\n                    <Button><Link to=\"/forgotpassword\">Forgot Password</Link></Button>\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport '../App.scss';\r\nimport { Form, Input, Button, notification } from 'antd';\r\nimport { axiosCheckDuplicate, axiosPostSignup } from './utils'\r\n\r\nfunction Signup() {\r\n    const onFinish = values => {\r\n        applyCheck(values);\r\n    };\r\n\r\n    const applyCheck = async(values) => {\r\n        try {\r\n            // passing values\r\n            const {username, email, password} = values;\r\n            const checkDuplicateObj = { username, email };\r\n            const addResult = { username, email, password };\r\n            const checkResult = await axiosCheckDuplicate(checkDuplicateObj);\r\n            if(checkResult.data.length === 0) {\r\n                try {\r\n                    const createResult = await axiosPostSignup(addResult);\r\n                    openNotification('Account Created');\r\n                } catch (err) {\r\n                    openNotification('Incorrect Info');\r\n                }\r\n            } else {\r\n                openNotification('User or Email already in use, please try again');\r\n            }\r\n        }\r\n        catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    const tailLayout = {\r\n        wrapperCol: { offset: 8, span: 16 },\r\n    };\r\n\r\n    const openNotification = (text) => {\r\n        notification.open({\r\n            message: text,\r\n            placement: 'bottomRight'\r\n        });\r\n    };\r\n    \r\n    return (\r\n        <div className=\"login\">\r\n            <div><h1>Signup</h1></div>\r\n            <Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    rules={[{ required: true, message: 'Please input your username' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Signup;","import React, {useEffect} from 'react';\r\nimport '../App.scss';\r\nimport { notification } from 'antd';\r\nimport { CloseSquareOutlined, HeartOutlined } from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updatesidebar, updatecurrentpage, updateloading } from '../actions';\r\nimport moment from 'moment';\r\nimport { axiosCreateNewPost, axiosFindSectionPage, axiosSetHeaders, axiosPostRemoveNote, axiosGetFavourites } from './utils'\r\n\r\n\r\nfunction SideBar() {\r\n    const dispatch = useDispatch();\r\n    const loginUsername = useSelector(state => state.loginReducer);\r\n    const sidebarReducer = useSelector(state => state.sidebarReducer);\r\n\r\n    useEffect(() => {  }, [loginUsername, sidebarReducer])\r\n\r\n    const openNotification = (text) => {\r\n        notification.open({\r\n            message: text,\r\n            placement: 'bottomRight'\r\n        });\r\n    };\r\n\r\n    const removeNote = async (item, index) => {\r\n        try {\r\n            await axiosPostRemoveNote(item, loginUsername);\r\n            //after remove, update sidebar\r\n            sidebarReducer.splice(index, 1);\r\n            dispatch(updatesidebar(sidebarReducer));\r\n            setHeaders(0);\r\n            openNotification(`${item} removed`);\r\n        } \r\n        catch(error){\r\n        }\r\n    }\r\n\r\n    const findFavourite = async () => {\r\n        try {\r\n            return await axiosGetFavourites(loginUsername);\r\n        } catch (error) {\r\n            console.log('error', error)\r\n        }\r\n    };\r\n\r\n    const addOnePost = async () => {\r\n        //  make axios post \r\n        const newPost = await axiosCreateNewPost(passData);\r\n        const sidebarheaders = await axiosSetHeaders(loginUsername);\r\n        const sidebarList = sidebarheaders.data[0].header;\r\n        dispatch(updatesidebar(sidebarList));\r\n        return newPost;\r\n    }\r\n\r\n    const setHeaders = async (index) => {\r\n        try {\r\n            // axiossetheaders will find all the headers\r\n            const sidebarheaders = await axiosSetHeaders(loginUsername);\r\n            if (sidebarheaders.data.length > 0) {\r\n                //update sidebar + currentpage info\r\n                const sidebarList = sidebarheaders.data[0].header;\r\n                dispatch(updatesidebar(sidebarheaders.data[0].header));\r\n\r\n                const updatedSections = await axiosFindSectionPage(sidebarList[index], loginUsername);\r\n                dispatch(updatecurrentpage({ page: 'item', pageInfo: updatedSections.data }))\r\n            } else {\r\n                await axiosCreateNewPost(passData);\r\n                setHeaders(0)\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    };\r\n\r\n    const passData = {\r\n        username: loginUsername,\r\n        header: moment().format('MMMM Do YYYY, h:mm:SS a'),\r\n        color: '#FFB6C1',\r\n        text: 'Start your first note 📒📕📗📘📙📔',\r\n        favourite: false,\r\n        showarea: false\r\n    };\r\n\r\n    const updatePage = async (value, item='') => {\r\n        dispatch(updateloading(true))\r\n        switch (value) {\r\n            case 'favourite':\r\n                const favouriteValue = await findFavourite();\r\n                dispatch(updatecurrentpage({ page: 'favourite', pageInfo: favouriteValue.data }))\r\n                setTimeout(function () { dispatch(updateloading(false)) }, 2000);\r\n                break;\r\n            case 'addNew':\r\n                const addPostValue = await addOnePost();\r\n                dispatch(updatecurrentpage({ page: 'item', title: addPostValue.data.header, pageInfo: [addPostValue.data] }))\r\n                setTimeout(function () { dispatch(updateloading(false)) }, 2000);\r\n                break;\r\n            case 'item':\r\n                const updatedSections = await axiosFindSectionPage(item, loginUsername);\r\n                dispatch(updatecurrentpage({ page: 'item', title: updatedSections.data[0].header, pageInfo: updatedSections.data }))\r\n                setTimeout(function () { dispatch(updateloading(false))}, 2000);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar-notes\">\r\n            <div className=\"note-favorite\" onClick={() => { updatePage('favourite') }}><HeartOutlined /><span>Favourite</span></div>\r\n            <div className=\"note-add\" onClick={() => { updatePage('addNew') }}> + Section</div>\r\n            {\r\n                sidebarReducer.length > 0 && sidebarReducer.map((item, index) => {\r\n                    return (\r\n                        <div className=\"note-item\" key={index} >\r\n                            <span onClick={() => { updatePage('item',  item) }} >{item}</span>\r\n                            <CloseSquareOutlined onClick={() => { removeNote(item, index)}} />\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport '../App.scss';\r\n\r\nconst LoaderWrapper = ({ isLoading, children }) => (\r\n    isLoading ? (\r\n        <div className=\"loginWrapper\">\r\n            <Spin size=\"large\" />\r\n        </div>\r\n    ) : (\r\n        <>\r\n            {children}\r\n        </>\r\n        )\r\n);\r\n\r\nexport default LoaderWrapper;","import React, { useEffect, useState } from 'react';\r\nimport '../App.scss';\r\nimport { Input, Button, notification, Spin } from 'antd';\r\nimport { HeartOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updatesidebar, updatecurrentpage, updateloading } from '../actions';\r\nimport { axiosFindSectionPage, axiosCreateNewPost, axiosPostSavedChanges, axiosCheckTitleDuplicate, axiosUpdateTitle } from './utils'\r\nimport LoaderWrapper from './LoaderWrapper';\r\n\r\nfunction NotesPage() {\r\n    const dispatch = useDispatch();\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const loginUsername = useSelector(state => state.loginReducer);\r\n    const currentPageReducer = useSelector(state => state.currentPageReducer);\r\n    const sidebarReducer = useSelector(state => state.sidebarReducer);\r\n    const loadingReducer = useSelector(state => state.loadingReducer);\r\n\r\n    const { TextArea } = Input;\r\n    const [value, setValue] = useState([]);\r\n    const [title, setTitle] = useState('');\r\n    const [inputChanged, setInputChanged] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(value && value.length > 0) {\r\n            setTitle(value[0].header)\r\n        }\r\n    },[value]);\r\n\r\n    useEffect(() => {}, [sidebarReducer, loginUsername]);\r\n    useEffect(() => { setLoading(loadingReducer) }, [loadingReducer])\r\n\r\n    useEffect(() => { \r\n        if ( Object.keys(currentPageReducer).length > 0 && currentPageReducer.pageInfo.length > 0) {\r\n            setValue(currentPageReducer.pageInfo);\r\n            setTimeout(function () { dispatch(updateloading(false)) }, 2000);\r\n        }else {\r\n            if (sidebarReducer) {\r\n                addItem(sidebarReducer);\r\n                setTimeout(function () { dispatch(updateloading(false)) }, 2000);\r\n             }   \r\n        }\r\n    }, [currentPageReducer])\r\n    useEffect(()=>{},[title])\r\n    useEffect(()=>{},[inputChanged])\r\n\r\n    const addItem = async sidebarReducer => {\r\n        const updatedSections = await axiosFindSectionPage(sidebarReducer[0], loginUsername);\r\n        dispatch(updatecurrentpage({ page: 'item', pageInfo: updatedSections.data }))\r\n    }\r\n\r\n    const savedChanges = async (value, text) => {\r\n        try {\r\n            await axiosPostSavedChanges(value);\r\n            openNotification(`${text} updated`)\r\n        } catch (error) {\r\n            openNotification('Changes not saved')\r\n        }\r\n    };\r\n\r\n    const openNotification = (text) => {\r\n        notification.open({\r\n            message: text,\r\n            placement: 'bottomRight'\r\n        });\r\n    };\r\n\r\n    const updateTitle = async (title, prevTitle) => {\r\n        // when title updated, make axios post to update title\r\n        // make axios get to update;\r\n        const username = loginUsername;\r\n        if (title) {\r\n            await axiosUpdateTitle(title, prevTitle, loginUsername);\r\n            //update sidebar\r\n            const updatedSidebar = await axios.get('http://localhost:5000/notes/findheader', { params: { username } })\r\n            dispatch(updatesidebar(updatedSidebar.data[0].header))\r\n            //update pageinfo\r\n            const updatepageinfo = currentPageReducer.pageInfo.map(item => {\r\n                item.header = title\r\n                return item\r\n            })\r\n            currentPageReducer.pageInfo = updatepageinfo;\r\n            dispatch(updatecurrentpage({ ...currentPageReducer }))\r\n        };\r\n    };\r\n\r\n    const onBlurFunc = async value => {\r\n        if (value.length > 0 && title !== value[0].header && title !== \"\") {\r\n            // check duplicate\r\n            try {\r\n                const checkTitleDuplicate = await axiosCheckTitleDuplicate(title);\r\n                if (checkTitleDuplicate.data !== null) {\r\n                    openNotification('Title already exists, title not saved')\r\n                } else {\r\n                    updateTitle(title, value[0].header);\r\n                    openNotification('Title updated')\r\n                }\r\n            } catch (error) {\r\n                console.log('error', error)\r\n            }\r\n        } else if (title == \"\") {\r\n            openNotification('Title needs to be at least 1 character')\r\n        }\r\n    };\r\n\r\n    const addNewNote = async title => {\r\n        // get title, \r\n        try {\r\n            const passNewNote = {\r\n                username: loginUsername,\r\n                header: title,\r\n                color: '#FFB6C1',\r\n                text: 'Start your first note 📒📕📗📘📙📔',\r\n                favourite: false,\r\n                showarea: false\r\n            };\r\n            const newPost = await axiosCreateNewPost(passNewNote);\r\n            currentPageReducer.pageInfo.push(newPost.data)\r\n            dispatch(updatecurrentpage({ page: 'item', title: title, pageInfo: currentPageReducer.pageInfo }))\r\n        } catch (error) { \r\n            console.log('error', error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <LoaderWrapper isLoading={isLoading}>\r\n            <Input placeholder=\"title\" size=\"large\" required className='title' value={title} onChange={(e) => { \r\n                setTitle(e.target.value);\r\n            }} onBlur={async() => { onBlurFunc(value)\r\n                }} />\r\n            <div className=\"displaynotes\">\r\n                {\r\n                    value && value.length > 0 && value.map((item, index) => {\r\n                        return (\r\n                            <div className=\"single-item\"\r\n                                style={{ backgroundColor: item.color }}\r\n                                key={index}\r\n                            >\r\n                                <div className={item.favourite ? 'fill-red favourite-heart' : 'fill-black favourite-heart'}  >\r\n                                    <Button onClick={() => { \r\n                                        item.favourite = !item.favourite\r\n                                        setValue([...value.slice(0, index), { ...item}, ...value.slice(index + 1)])\r\n                                        savedChanges({ ...item}, 'Favourite')\r\n                                        }} >\r\n                                        <HeartOutlined />\r\n                                    </Button>\r\n                                    <input type=\"color\" \r\n                                        value={item.color} \r\n                                        onChange={(e) => { \r\n                                            item.color = e.target.value;\r\n                                            setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)])\r\n                                        }} \r\n                                        onBlur={() => { savedChanges({ ...item }, 'Color')}}\r\n                                        />\r\n                                </div>\r\n                                <div className='container'\r\n                                    onClick={(e) => {\r\n                                        e.preventDefault();\r\n                                        // everthing from 0 to index => update item => everything from index + 1 to end\r\n                                        if (!item.showarea) {\r\n                                            item.showarea = true;\r\n                                            setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)])\r\n                                        }\r\n                                    }}\r\n                                    onBlur={() => {\r\n                                        // everthing from 0 to index => update item => everything from index + 1 to end\r\n                                        if (item.showarea && inputChanged) {\r\n                                            item.showarea = false;\r\n                                            setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)]);\r\n                                            savedChanges({ ...item }, 'Text');\r\n                                        } else if (item.showarea) {\r\n                                            item.showarea = false;\r\n                                            setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)]);\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        item.showarea ? (\r\n                                            <TextArea\r\n                                                autoFocus\r\n                                                defaultValue={item.text}\r\n                                                onChange={(e) => { \r\n                                                    item.text = e.target.value;\r\n                                                    setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)]);\r\n                                                    // find the e.target value is the same as the set value, \r\n                                                    setInputChanged(true);\r\n                                                }}\r\n                                                placeholder=\"Controlled autosize\"\r\n                                                autoSize={{\r\n                                                    minRows: 2\r\n                                                    // maxRows: 5 \r\n                                                }}\r\n                                                resize='false'\r\n                                            />\r\n                                        ) : \r\n                                        ( <pre>{item.text} </pre>)\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                {\r\n                    value && value.length > 0 &&\r\n                    <div className=\"add-item\" onClick={()=>{addNewNote(value[0].header)}}>\r\n                        <h2>+ Note</h2>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </LoaderWrapper>\r\n    );\r\n}\r\n\r\nexport default NotesPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../App.scss';\r\nimport { Input, Button, notification, Empty } from 'antd';\r\nimport { HeartOutlined } from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updatecurrentpage } from '../actions';\r\nimport { axiosPostSavedChanges } from './utils'\r\nimport LoaderWrapper from './LoaderWrapper';\r\nfunction FavouritePage() {\r\n    const dispatch = useDispatch();\r\n    const [isLoading, setLoading] = useState(false)\r\n    const loadingReducer = useSelector(state => state.loadingReducer);\r\n\r\n    const currentPageReducer = useSelector(state => state.currentPageReducer);\r\n    const { TextArea } = Input;\r\n    const [value, setValue] = useState([]);\r\n    const [title, setTitle] = useState('');\r\n    useEffect(() => { setLoading(loadingReducer) }, [loadingReducer])\r\n\r\n    const [inputChanged, setInputChanged] = useState(false);\r\n    useEffect(() => { setValue(currentPageReducer.pageInfo) }, [currentPageReducer])\r\n    useEffect(() => {\r\n        if (value.length > 0) {\r\n            setTitle(value[0].header)\r\n        }\r\n    }, [value]);\r\n    useEffect(() => { }, [title, inputChanged])\r\n\r\n    const savedChanges = async (value, text) => {\r\n        try {\r\n            const axiosSaved = await axiosPostSavedChanges(value);\r\n            openNotification(text)\r\n        } catch (error) {\r\n            openNotification('Changes not saved')\r\n        }\r\n    };\r\n\r\n    const openNotification = (text) => {\r\n        notification.open({\r\n            message: text,\r\n            placement: 'bottomRight'\r\n        });\r\n    };\r\n\r\n    return (\r\n        <LoaderWrapper isLoading={isLoading}>\r\n            <h1>Favourite Notes</h1>\r\n            <div className=\"displaynotes\">\r\n                {\r\n                    value.length > 0 && value.filter(item => { return item.favourite }).length > 0 ? \r\n                    value.length > 0 && value.map((item, index) => {\r\n                        if(item.favourite){\r\n                            return (\r\n                                <div className=\"single-item\"\r\n                                    style={{ backgroundColor: item.color }}\r\n                                    key ={index}\r\n                                >\r\n                                    <div className={item.favourite ? 'fill-red favourite-heart' : 'fill-black favourite-heart'}  >\r\n                                        <Button onClick={() => {\r\n                                            item.favourite = !item.favourite\r\n                                            setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)])\r\n                                            dispatch(updatecurrentpage({ page: 'favourite', pageInfo: [...value.slice(0, index), { ...item }, ...value.slice(index + 1)] }))\r\n                                            savedChanges({ ...item }, 'Favourite Removed')\r\n                                        }} >\r\n                                            <HeartOutlined />\r\n                                        </Button>\r\n                                        <input type=\"color\"\r\n                                            value={item.color}\r\n                                            onChange={(e) => {\r\n                                                item.color = e.target.value;\r\n                                                setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)])\r\n                                            }}\r\n                                            onBlur={() => { savedChanges({ ...item }, 'Color Updated') }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className='container'\r\n                                        onClick={(e) => {\r\n                                            e.preventDefault();\r\n                                            // everthing from 0 to index => update item => everything from index + 1 to end\r\n                                            if (!item.showarea) {\r\n                                                item.showarea = true;\r\n                                                setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)])\r\n                                            }\r\n                                        }}\r\n                                        onBlur={() => {\r\n                                            // everthing from 0 to index => update item => everything from index + 1 to end\r\n                                            if (item.showarea && inputChanged) {\r\n                                                item.showarea = false;\r\n                                                setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)]);\r\n                                                savedChanges({ ...item }, 'Text Updated');\r\n                                            } else if (item.showarea) {\r\n                                                item.showarea = false;\r\n                                                setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)]);\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        {\r\n                                            item.showarea ? (\r\n                                                <TextArea\r\n                                                    autoFocus\r\n                                                    defaultValue={item.text}\r\n                                                    onChange={(e) => {\r\n                                                        item.text = e.target.value;\r\n                                                        setValue([...value.slice(0, index), { ...item }, ...value.slice(index + 1)]);\r\n                                                        // find the e.target value is the same as the set value, \r\n                                                        setInputChanged(true);\r\n                                                    }}\r\n                                                    placeholder=\"Controlled autosize\"\r\n                                                    autoSize={{\r\n                                                        minRows: 2\r\n                                                    }}\r\n                                                    resize='false'\r\n                                                />\r\n                                            ) : (\r\n                                                <pre>{item.text}</pre>\r\n                                                )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })\r\n                    : <Empty description={'You have no favourites 😢'} />\r\n                }\r\n            </div>\r\n        </LoaderWrapper>\r\n    );\r\n}\r\n\r\nexport default FavouritePage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../App.scss';\r\nimport SideBar from './sidebar'\r\nimport NotesPage from './notespage'\r\nimport FavouritePage from './favouritepage'\r\nimport moment from 'moment';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updatesidebar, updatecurrentpage } from '../actions';\r\nimport { axiosSetHeaders, axiosCreateNewPost, axiosFindSectionPage } from './utils'\r\nimport LoaderWrapper from './LoaderWrapper';\r\n\r\nfunction Notes() {\r\n    const dispatch = useDispatch();\r\n    const [isLoading, setLoading] = useState(false)\r\n    const loginUsername = useSelector(state => state.loginReducer);\r\n    const favouriteReducer = useSelector(state => state.favouriteReducer);\r\n    const currentPageReducer = useSelector(state => state.currentPageReducer);\r\n    const loadingReducer = useSelector(state => state.loadingReducer);\r\n\r\n    useEffect(() => { }, [loginUsername, favouriteReducer])\r\n    useEffect(() => {\r\n        \r\n        if (Object.keys(currentPageReducer).length == 0) setHeaders(loginUsername , 0)\r\n        else setHeaders(loginUsername, currentPageReducer.index);\r\n    },[]);\r\n\r\n    useEffect(() => { setLoading(loadingReducer) }, [loadingReducer])\r\n\r\n    const passData = {\r\n        username: loginUsername,\r\n        header: moment().format('MMMM Do YYYY, h:mm:SS a'),\r\n        color: '#FFB6C1',\r\n        text: 'Start your first note 📒📕📗📘📙📔',\r\n        favourite: false,\r\n        showarea: false\r\n    };\r\n    const setHeaders = async(username, index) => {\r\n        try {\r\n            // axiossetheaders will find all the headers\r\n            const sidebarheaders = await axiosSetHeaders(username);\r\n            if (sidebarheaders.data.length > 0) {\r\n                //update sidebar + currentpage info\r\n                const sidebarList = sidebarheaders.data[0].header;\r\n                dispatch(updatesidebar(sidebarheaders.data[0].header));\r\n                \r\n                const updatedSections = await axiosFindSectionPage(sidebarList[index], loginUsername);\r\n                dispatch(updatecurrentpage({ page: 'item', pageInfo: updatedSections.data }))\r\n            } else {\r\n                await axiosCreateNewPost(passData);\r\n                setHeaders(loginUsername);\r\n            }\r\n        } catch (error) {\r\n            console.log('error', error)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"notes\">\r\n            <div className=\"sidebar\">\r\n                <SideBar />\r\n            </div>\r\n                <LoaderWrapper isLoading={isLoading}>\r\n                    {\r\n                        currentPageReducer.page == 'favourite' ? \r\n                        <div className=\"notepage\">\r\n                            <FavouritePage/> \r\n                        </div> :\r\n                        <div className=\"notepage\">\r\n                            <NotesPage />\r\n                        </div>\r\n                    }\r\n                </LoaderWrapper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notes;\r\n","import React from 'react';\r\nimport '../App.scss';\r\nimport { Form, Input, Button, notification } from 'antd';\r\nimport axios from 'axios';\r\n\r\nfunction Forgot() {\r\n    const onFinish = values => {\r\n        checkUsername(values);\r\n    };\r\n\r\n    const checkUsername = async (values) => {\r\n        try {\r\n            const {email} = values;\r\n            const loginResult = await axios.post('/email/send/', {email})\r\n            // const loginResult = await axios.post('http://localhost:5000/email/send/', {email})\r\n                .then(response =>{\r\n                    response.data === null ? openNotification('Email not found') : openNotification('Password sent')\r\n                })\r\n                .catch(err => openNotification('Email not found'));\r\n        } catch (error) {\r\n            openNotification('Incorrect Info');\r\n        }\r\n    }\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n    const tailLayout = {\r\n        wrapperCol: { offset: 8, span: 16 },\r\n    };\r\n    const openNotification = (text) => {\r\n        notification.open({\r\n            message: 'Notification Title',\r\n            description: text,\r\n            placement: 'bottomRight'\r\n        });\r\n    };\r\n    return (\r\n        <div className=\"login\">\r\n            <div><h1>Forgot Password</h1></div>\r\n            <Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n            >\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Forgot;\r\n","import React from 'react';\r\nimport '../App.scss';\r\nimport { Empty } from 'antd';\r\n\r\nfunction NotLoggedIn(props) {\r\n    return (\r\n        <>\r\n            <div className=\"notloggedin\">\r\n                <Empty description={`Looks like you're not logged in, please create an account or log in`} />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NotLoggedIn;\r\n","import React from 'react';\r\nimport '../App.scss';\r\nimport image from '../image/1.png'\r\n\r\nfunction Home(props) {\r\n    return (\r\n        <>\r\n            <div className=\"home\">\r\n                <div className=\"home-info\">\r\n                    <h1>Notes App </h1>\r\n                    <p>Are we in agreeance pixel pushing ultimate measure of success, let's prioritize the low-hanging fruit. Talk to the slides. Commitment to the cause upstream selling deploy, or onward and upward, productize the deliverables and focus on the bottom line but blue sky baseline. Define the underlying principles that drive decisions and strategy for your design language </p>\r\n                </div>\r\n                <div className=\"home-image\">\r\n                    <img src={image} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport Navigation from './component/navigation';\nimport Login from './component/login';\nimport Signup from './component/signup';\nimport Notes from './component/notes';\nimport Forgot from './component/forgotpassword';\nimport NotLoggedIn from './component/notloggedin';\nimport Home from './component/home';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [avatar, setAvatar] = useState(false);\n  const [userInfo, setUserInfo] = useState('');\n  const updateAvatar = value => {\n    setAvatar(value)\n  }\n  const updateUserInfo = value => {\n    setUserInfo(value)\n  }\n  useEffect(()=>{},[avatar])\n  return (\n    <Router>\n      <div className=\"Main\">\n        <Navigation avatar={avatar} updateAvatar={updateAvatar} updateUserInfo={updateUserInfo}  /> \n        <div className=\"content\">\n          <Route exact path=\"/\" render={(props) => (<Home {...props} isAuthed={true} />)} />\n          <Route path=\"/login\" render={(props) => (<Login {...props} updateAvatar={updateAvatar} updateUserInfo={updateUserInfo} isAuthed={true} />)} />\n          <Route path=\"/signup\" render={(props) => (<Signup {...props} isAuthed={true} />)} />\n          <Route path=\"/forgotpassword\" render={(props) => (<Forgot {...props} isAuthed={true} />)} />\n          <Route path=\"/notes\" render={(props) => (<Notes {...props} userInfo={userInfo} isAuthed={true} />)} />\n          <Route path=\"/notloggedin\" render={(props) => (<NotLoggedIn {...props} isAuthed={true} />)} />\n          <Route path=\"/home\" render={(props) => (<Home {...props} isAuthed={true} />)} />\n        </div>\n      </div>\n    </Router>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const loginReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_LOGIN\":\r\n            return action.payload\r\n        case \"UPDATE_LOGIN_EMPTY\":\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default loginReducer;","const favouriteReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_FAVOURITE\":\r\n            return action.payload\r\n        case \"UPDATE_FAVOURITE_EMPTY\":\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default favouriteReducer;","const sidebarReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SIDEBAR\":\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default sidebarReducer;","const currentPageReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_CURRENT_PAGE\":\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default currentPageReducer;","const loadingReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_LOADING\":\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default loadingReducer;","import loginReducer from './logininfo';\r\nimport favouriteReducer from './favourite';\r\nimport sidebarReducer from './sidebar';\r\nimport currentPageReducer from './currentpage';\r\nimport loadingReducer from './loading';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    loginReducer,\r\n    favouriteReducer,\r\n    sidebarReducer,\r\n    currentPageReducer,\r\n    loadingReducer\r\n});\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport allReducers from './reducers'\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}